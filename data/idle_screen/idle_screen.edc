collections {
	images {
		image: "background.png" COMP;
		image: "logo.png" COMP;
		image: "clock.png" COMP;
		image: "bottom.png" COMP;
		image: "slider.png" COMP;
		image: "alien.png" COMP;
		image: "eye.png" COMP;
		image: "sliderbackground_left.png" COMP;
		image: "sliderbackground_middle.png" COMP;
		image: "sliderbackground_right.png" COMP;
		image: "gsm_no.png" COMP;
		image: "gsm_0.png" COMP;
		image: "gsm_1.png" COMP;
		image: "gsm_2.png" COMP;
		image: "gsm_3.png" COMP;
		image: "gsm_4.png" COMP;
		image: "cpu.png" COMP;
		image: "display.png" COMP;
		image: "bluetooth.png" COMP;
		image: "wifi.png" COMP;
		image: "gps.png" COMP;
		image: "alarm.png" COMP;
		image: "bat_no.png" COMP;
		image: "bat_10.png" COMP;
		image: "bat_20.png" COMP;
		image: "bat_40.png" COMP;
		image: "bat_60.png" COMP;
		image: "bat_80.png" COMP;
		image: "bat_100.png" COMP;
		image: "unfinishedTasks.png" COMP;
		image: "unreadMessages.png" COMP;
		image: "missedCalls.png" COMP;
		}
	fonts {
		font: "VeraBd.ttf" "VeraBd";
		font: "Miso.ttf" "Miso";
	}

	group {
		name: "phoneui/idle_screen/idle_screen";

		script {
			public clock_cb(val) {
				new buf[11];
				new date_buf[12];
				new year, month, day, yearday, weekday, hour, minute;
				new Float:second;
				new Float:s;

				date(year, month, day, yearday, weekday, hour, minute, second);
				s = 60.0 - second;
				while (s < 0.0) s = s + 5.0;
				if (val >= 0) timer(60.0 - second, "clock_cb", 1);
				if ((hour < 10) && (minute < 10)) {
					snprintf(buf, 10, "0%i:0%i", hour, minute);
				}
				else if ((hour < 10) && (minute >= 10)) {
					snprintf(buf, 10, "0%i:%i", hour, minute);
				}
				else if ((hour >= 10) && (minute < 10)) {
					snprintf(buf, 10, "%i:0%i", hour, minute);
				}
				else if ((hour >= 10) && (minute >= 10)) {
					snprintf(buf, 10, "%i:%i", hour, minute);
				}
				snprintf(date_buf, 11, "%i.%i.%i", day, month, year);
				set_text(PART:"time", buf);
				set_text(PART:"date", date_buf);
			}
			public move_eye(nx, ny) {
				new fx, fy, fw, fh, Float:h, Float:angle, Float:px, Float:py, Float:sina, Float:cosa;
				
				get_geometry(PART:"eye-place", fx, fy, fw, fh);
				
				fx=fx+fw/2;
				fy=fy+fh/2;
				px=nx-fx;
				py=ny-fy;
				angle = atan2(px, py);
				h=hypot(px,py);
				if (!(abs(h) < (abs(hypot(fh*0.7, fw*0.7))))) {
					sina = sin(angle);
					cosa = cos(angle);
					px = hypot(fh*0.8 * cosa, fw*0.8 * sina) * sina;
					py = hypot(fh*0.8 * cosa, fw*0.8 * sina) * cosa;
				}
				
				set_drag(PART:"eye", px, py);
			}
		}

		parts {
			part {
				name: "background-image";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 {
						relative: 0.0 0.0;
					}
					rel2 {
						relative: 1.0 1.0;
					}
					image {
						normal: "background.png";
					}
				}
			}

			part {
				name: "background-logo";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					aspect: 1 1;
					align: 0 0.5;
					rel1 {
						relative: 0.07 0.61;
					}
					rel2 {
						relative: 0.07 0.79;
					}
					image {
						normal, "logo.png";
					}
				}
			}

			part {
				type: RECT;
				name: "text-boundaries";
				description {
					color: 0 0 255 0;
					rel1 {
						relative: 1.22 0.28;
						to: "background-logo";
					}
					rel2 {
						relative: 2.12 0.735;
						to: "background-logo";
					}
				} 
			}

			part {
				name: "background-text";
				type: RECT;
				/*effect: SOFT_SHADOW;*/
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 0 0;
					/*color3: 0 0 0 16;*/
					rel1 {
						relative: -0.02 -0.35;
						to: "text-boundaries";
					}
					rel2 {
						relative: 1.03 1.35;
						to: "text-boundaries";
					}
					/*text {
						text: "SHR";
						font: "Miso";
						fit: 1 1;
						size: 255;
						align: 0.0 0.5;
					}*/
				}
			}

			part {
				name: "text-S";
				type: TEXT;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 {
						relative: 0.0 0.0;
						to: "background-text";
					}
					rel2 {
						relative: 1.0 1.0;
						to: "background-text";
					}
					text {
						text: "S";
						font: "Miso";
						fit: 1 1;
						size: 255;
						align: 0.0 0.0;
					}
				}
			}

			part {
				name: "text-H";
				type: TEXT;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 {
						relative: 0.0 0.0;
						to: "background-text";
					}
					rel2 {
						relative: 1.0 1.0;
						to: "background-text";
					}
					text {
						text: "H";
						font: "Miso";
						fit: 1 1;
						size: 255;
						align: 0.5 0.0;
					}
				}
			}

			part {
				name: "text-R";
				type: TEXT;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 {
						relative: 0.0 0.0;
						to: "background-text";
					}
					rel2 {
						relative: 1.0 1.0;
						to: "background-text";
					}
					text {
						text: "R";
						font: "Miso";
						fit: 1 1;
						size: 255;
						align: 1.0 0.0;
					}
				}
			}

			part {
				name: "alien";
				type: IMAGE;
				description {
					state: "default" 0.0;
					aspect: 1 1.1025;
					rel1 {
						relative: 0.45645 0.2518;
					}
					rel2 {
						relative: 1.125 0.7534;
					}
					image {
						normal, "alien.png";
					}
				}
			}

			part {
				name: "eye-place";
				type: RECT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 0 0 0 0;
					aspect: 1 1;
					rel1 {
						relative: 0.475 0.41;
						to: "alien";
					}
					rel2 {
						relative: 0.545 0.49;
						to: "alien";
					}
				}
			}

			part {
				name: "eye";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					aspect: 1 1;
					rel1 {
						relative: 0.0 0.0;
						to: "eye-place";
					}
					rel2 {
						relative: 1.0 1.0;
						to: "eye-place";
					}
					image {
						normal, "eye.png";
					}
				}
				dragable {
					x: 1 0 0;
					y: 1 0 0;
				}
			}


/////////////////////////////////// TOPBAR /////////////////////////////////////
			part {
				name: "topbarContainer";
				type: GROUP;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 0.0; offset: 0 -150; }
					rel2 { relative: 1.0 0.0; offset: 0 -120; }
				}
				description {
					state: "hvga" 0.0;
					rel1 { relative: 0.0 0.0; offset: 0 -115; }
					rel2 { relative: 1.0 0.0; offset: 0 -90; }
				}
			}

			part {
				name: "topbar";
				type: RECT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 0 0 0 255;
					rel1 { relative: 0.0 0.0; }
					rel2 { relative: 1.0 0.0; offset: 0 30; }
				}
				description {
					state: "hvga" 0.0;
					color: 0 0 0 255;
					rel1 { relative: 0.0 0.0; }
					rel2 { relative: 1.0 0.0; offset: 0 25; }
				}
				description {
					state: "hidden" 0.0;
					inherit: "default" 0.0;
					rel1 { to: "topbarContainer"; relative: 0.0 0.0; offset: 0 0; }
					rel2 { to: "topbarContainer"; relative: 1.0 1.0; offset: 0 0; }
				}
			}

			part {
				name: "gsmContainer";
				type: GROUP;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 { to: "topbar"; relative: 0.0 0.0; offset: 5 5; }
					rel2 { to: "topbar"; relative: 0.0 1.0; offset: 38 -5; }
				}
				description {
					state: "hvga" 0.0;
					rel1 { to: "topbar"; relative: 0.0 0.0; offset: 5 5; }
					rel2 { to: "topbar"; relative: 0.0 1.0; offset: 32 -5; }
				}
			}

			part {
				name: "gsmStrength";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "gsm_no.png"; }
					rel1 { to: "gsmContainer"; }
					rel2 { to: "gsmContainer"; }
				}
				description {
					state: "0" 0.0;
					inherit: "default" 0.0;
					image { normal: "gsm_0.png"; }
				}
				description {
					state: "1" 0.0;
					inherit: "default" 0.0;
					image { normal: "gsm_1.png"; }
				}
				description {
					state: "2" 0.0;
					inherit: "default" 0.0;
					image { normal: "gsm_2.png"; }
				}
				description {
					state: "3" 0.0;
					inherit: "default" 0.0;
					image { normal: "gsm_3.png"; }
				}
				description {
					state: "4" 0.0;
					inherit: "default" 0.0;
					image { normal: "gsm_4.png"; }
				}
			}

			program {
				name: "gsmSignalChange";
				signal: "*";
				source: "gsmSignalChange";
				script {
					new val;
					val = atoi(sig);
					if(val > 0 && val <=20) {
						set_state(PART:"gsmStrength", "0", 0.0);
					}
					else if(val > 20 && val <= 40) {
						set_state(PART:"gsmStrength", "1", 0.0);
					}
					else if(val > 40 && val <= 60) {
						set_state(PART:"gsmStrength", "2", 0.0);
					}
					else if(val > 60 && val <= 80) {
						set_state(PART:"gsmStrength", "3", 0.0);
					}
					else if(val > 80) {
						set_state(PART:"gsmStrength", "4", 0.0);
					}
					else {
						set_state(PART:"gsmStrength", "default", 0.0);
					}
				}
			}


			part {
				name: "gsmProvider";
				type: TEXT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					text { text: ""; font: "VeraBd"; align: 0.0 0.5; fit: 0 1; }
					rel1 { to: "gsmStrength"; relative: 1.0 0.0; offset: 5 1; }
					rel2 { to: "gsmStrength"; relative: 1.0 1.0; offset: 170 -1; }
				}
			}

			part {
				name: "pdpStatus";
				type: TEXT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					text { text: ""; font: "Sans"; size: 1; fit: 1 1; align: 0.0 0.5; }
					rel1 { to: "topbar"; relative: 0.0 0.0; offset: 0 0; }
					rel2 { to: "topbar"; relative: 0.0 0.0; offset: 22 22; }
				}
			}

			part {
				name: "batteryContainer";
				type: GROUP;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 { to: "topbar"; relative: 1.0 0.0; offset: -37 5; }
					rel2 { to: "topbar"; relative: 1.0 1.0; offset: -5 -5; } 
				}
				description {
					state: "hvga" 0.0;
					rel1 { to: "topbar"; relative: 1.0 0.0; offset: -31 5; }
					rel2 { to: "topbar"; relative: 1.0 1.0; offset: -5 -5; } 
				}
			}

			part {
				name: "batteryPower";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "bat_no.png"; }
					rel1 { to: "batteryContainer"; }
					rel2 { to: "batteryContainer"; }
				}
				description {
					state: "10" 0.0;
					inherit: "default" 0.0;
					image { normal: "bat_10.png"; }
				}
				description {
					state: "20" 0.0;
					inherit: "default" 0.0;
					image { normal: "bat_20.png"; }
				}
				description {
					state: "40" 0.0;
					inherit: "default" 0.0;
					image { normal: "bat_40.png"; }
				}
				description {
					state: "60" 0.0;
					inherit: "default" 0.0;
					image { normal: "bat_60.png"; }
				}
				description {
					state: "80" 0.0;
					inherit: "default" 0.0;
					image { normal: "bat_80.png"; }
				}
				description {
					state: "100" 0.0;
					inherit: "default" 0.0;
					image { normal: "bat_100.png"; }
				}
			}

			program {
				name: "batteryPowerChange";
				signal: "*";
				source: "batteryPowerChange";
				script {
					new val;
					val = atoi(sig);
					if(val > 0 && val <=10) {
						set_state(PART:"batteryPower", "10", 0.0);
					}
					else if(val > 10 && val <= 20) {
						set_state(PART:"batteryPower", "20", 0.0);
					}
					else if(val > 20 && val <= 40) {
						set_state(PART:"batteryPower", "40", 0.0);
					}
					else if(val > 40 && val <= 60) {
						set_state(PART:"batteryPower", "60", 0.0);
					}
					else if(val > 60 && val <= 80) {
						set_state(PART:"batteryPower", "80", 0.0);
					}
					else if(val > 80 && val <= 100) {
						set_state(PART:"batteryPower", "100", 0.0);
					}
					else {
						set_state(PART:"batteryPower", "default", 0.0);
					}
				}
			}

#define RESOURCE(__name, __image, __relTo, __distance)							\
		part {											\
			name: __name;									\
			type: IMAGE;									\
			mouse_events: 0;								\
			description {									\
				state: "default" 0.0;							\
				aspect: 0 0;								\
				image { normal: __image; }						\
				rel1 { to: __relTo; relative: __distance 0.0; }				\
				rel2 { to: __relTo; relative: __distance 1.0; }				\
			}										\
			description {									\
				state: "active" 0.0;							\
				inherit: "default" 0.0;							\
				aspect: 1 1;								\
			}										\
		}											\
		program {										\
			name: __name",active";								\
			signal: __name",active";							\
			source: "resourceStateChange";							\
			action: STATE_SET "active" 0.0;							\
			target: __name;									\
		}											\
		program {										\
			name: __name",default";								\
			signal: __name",default";							\
			source: "resourceStateChange";							\
			action: STATE_SET "default" 0.0;						\
			target: __name;									\
		}

RESOURCE("CPU", "cpu.png", "batteryPower", -0.5);
RESOURCE("Display", "display.png", "CPU", -0.6);
RESOURCE("Bluetooth", "bluetooth.png", "Display", -0.6);
RESOURCE("WiFi", "wifi.png", "Bluetooth", -0.6);
RESOURCE("GPS", "gps.png", "WiFi", -0.6);
RESOURCE("alarm", "alarm.png", "GPS", -0.6);

///////////////////////////////// CLOCK ////////////////////////////////////////
			part {
				name: "clockContainer";
				type: GROUP;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 0.0; offset: 0 -120; }
					rel2 { relative: 1.0 0.0; offset: 0 0; }
				}
				description {
					state: "hvga" 0.0;
					rel1 { relative: 0.0 0.0; offset: 0 -90; }
				rel2 { relative: 1.0 0.0; offset: 0 0; }
					}
			}

			part {
				name: "clock";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "clock.png"; }
					rel1 { to: "topbar"; relative: 0.0 1.0; }
					rel2 { to: "topbar"; relative: 1.0 1.0; offset: 0 120; }
				}
				description {
					state: "hvga" 0.0;
					image { normal: "clock.png"; }
					rel1 { to: "topbar"; relative: 0.0 1.0; }
					rel2 { to: "topbar"; relative: 1.0 1.0; offset: 0 90; }
				}
				description {
					state: "hidden" 0.0;
					inherit: "default" 0.0;
					rel1 { to: "clockContainer"; relative: 0.0 0.0; offset: 0 0; }
					rel2 { to: "clockContainer"; relative: 1.0 1.0; offset: 0 0; }
				}
			}

			part {
				name: "time";
				type: TEXT;
				effect: SOFT_SHADOW;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					color3: 0 0 0 16;
					rel1 { to: "clock"; relative: 0.0 -0.15; }
					rel2 { to: "clock"; relative: 1.0 0.7; }
					text { text: "00:00"; font: "Sans"; fit: 0 1; }
				}
			}
			part {
				name: "date";
				type: TEXT;
				effect: SOFT_SHADOW;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					color3: 0 0 0 8;
					rel1 { to: "clock"; relative: 0.0 0.50; }
					rel2 { to: "clock"; relative: 1.0 0.75; }
					text { text: "DD.MM.YYYY"; font: "Sans"; fit: 0 1; }
				}
			}
			part {
				name: "profile";
				type: TEXT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 { to: "clock"; relative: 0.0 0.75; }
					rel2 { to: "clock"; relative: 1.0 0.9; }
					text { text: ""; font: "Sans"; fit: 0 1; }
				}
			}

//////////////////////////////// MIDDLE TOP ////////////////////////////////////

#define NOTIFICATION(__name, __icon, __heading, __line1, __line2, __relTo)				\
		part {											\
			name: __name"Notification";							\
			type: RECT;									\
			mouse_events: 0;								\
			description {									\
				state: "default" 0.0;							\
				color: 20 20 20 255;							\
				rel1 { to: __relTo; relative: 0.0 1.0; }				\
				rel2 { to: __relTo; relative: 0.0 1.8; }				\
			}										\
			description {									\
				state: "active" 0.0;							\
				inherit: "default" 0.0;							\
				rel1 { relative: 0.0 1.0; }						\
				rel2 { relative: 1.0 1.8; }						\
			}										\
		}											\
		part {											\
			name: __name"HeadingBg";							\
			type: RECT;									\
			mouse_events: 0;								\
			description {									\
				state: "default" 0.0;							\
				color: 85 85 85 255;							\
				rel1 { to: __name"Notification"; relative: 0.01 0.01; }			\
				rel2 { to: __name"Notification"; relative: 0.99 0.4; }			\
			}										\
		}											\
		part {											\
			name: __name"Heading";								\
			type: TEXT;									\
			mouse_events: 0;								\
			description {									\
				state: "default" 0.0;							\
				color: 255 255 255 255;							\
				rel1 { to: __name"HeadingBg"; relative: 0.02 -0.1; }			\
				rel2 { to: __name"HeadingBg"; relative: 0.98 1.1; }			\
				text { text: __heading; font: "Sans"; fit: 0 1; align: 0.0 0.0; }	\
			}										\
		}											\
		part {											\
			name: __name"Line1";								\
			type: TEXT;									\
			mouse_events: 0;								\
			description {									\
				state: "default" 0.0;							\
				color: 255 255 255 255;							\
				rel1 { to: __name"Notification"; relative: 0.02 0.4; }			\
				rel2 { to: __name"Notification"; relative: 0.98 0.7; }			\
				text { text: __line1; font: "Sans"; fit: 0 1; align: 0.0 0.0; }		\
			}										\
		}											\
		part {											\
			name: __name"Line2";								\
			type: TEXT;									\
			mouse_events: 0;								\
			description {									\
				state: "default" 0.0;							\
				color: 255 255 255 255;							\
				rel1 { to: __name"Notification"; relative: 0.02 0.7; }			\
				rel2 { to: __name"Notification"; relative: 0.98 1.0; }			\
				text { text: __line2; font: "Sans"; fit: 0 1; align: 0.0 0.0; }		\
			}										\
		}											\
		program {										\
			name: "activate_"__name;							\
			signal: "*";									\
			source: "activate_"__name;							\
			action: STATE_SET "active" 0.0;							\
			target: __name"Notification";							\
			transition: LINEAR 0.5;								\
		}											\
		program {										\
			name: "deactivate_"__name;							\
			signal: "*";									\
			source: "deactivate_"__name;							\
			action: STATE_SET "default" 0.0;						\
			target: __name"Notification";							\
			transition: LINEAR 0.5;								\
		}

//name, icon, heading, line1, line2, relative_to
NOTIFICATION("incomingCall", "incomingCall.png", "", "", "", "clock");

//////////////////////////////// MIDDLE BOTTOM /////////////////////////////////

			part {
				name: "unfinishedTasks";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "unfinishedTasks.png"; }
					rel1 { to: "bottomContainer"; relative: 0.9 -1.6; }
					rel2 { to: "bottomContainer"; relative: 0.9 -1.05; }
				}
				description {
					state: "active" 0.0;
					inherit: "default" 0.0;
					aspect: 1 1;
				}
			}

			part {
				name: "unfinishedTasksLabel";
				type: TEXT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 { to: "unfinishedTasks"; relative: 0.0 -0.1; }
					rel2 { to: "unfinishedTasks"; relative: 1.0 0.6; }
					text { text: "0"; font: "Sans"; fit: 0 1; }
				}
			}

			program {
				name: "showUnfinishedTasks";
				signal: "show";
				source: "unfinishedTasks";
				action: STATE_SET "active" 0.0;
				transition: LINEAR 0.5;
				target: "unfinishedTasks";
			}
			program {
				name: "hideUnfinishedTasks";
				signal: "hide";
				source: "unfinishedTasks";
				action: STATE_SET "default" 0.0;
				transition: LINEAR 0.5;
				target: "unfinishedTasks";
			}

			part {
				name: "unreadMessages";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "unreadMessages.png"; }
					rel1 { to: "unfinishedTasks"; relative: -0.6 0.0; }
					rel2 { to: "unfinishedTasks"; relative: -0.6 1.0; }
					}
				description {
					state: "active" 0.0;
					inherit: "default" 0.0;
					aspect: 1 1;
				}
			}

			part {
				name: "unreadMessagesLabel";
				type: TEXT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 { to: "unreadMessages"; relative: 0.0 -0.1; }
					rel2 { to: "unreadMessages"; relative: 1.0 0.6; }
					text { text: "0"; font: "Sans"; fit: 0 1; }
				}
			}

			program {
				name: "showUnreadMessages";
				signal: "show";
				source: "unreadMessages";
				action: STATE_SET "active" 0.0;
				transition: LINEAR 0.5;
				target: "unreadMessages";
			}
			program {
				name: "hideUnreadMessages";
				signal: "hide";
				source: "unreadMessages";
				action: STATE_SET "default" 0.0;
				transition: LINEAR 0.5;
				target: "unreadMessages";
			}

			part {
				name: "missedCalls";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "missedCalls.png"; }
					rel1 { to: "unreadMessages"; relative: -0.6 0.0; }
					rel2 { to: "unreadMessages"; relative: -0.6 1.0; }
				}
				description {
					state: "active" 0.0;
					inherit: "default" 0.0;
					aspect: 1 1;
				}
			}

			part {
				name: "missedCallsLabel";
				type: TEXT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 255;
					rel1 { to: "missedCalls"; relative: 0.0 -0.1; }
					rel2 { to: "missedCalls"; relative: 1.0 0.6; }
					text { text: "0"; font: "Sans"; fit: 0 1; }
				}
			}

			program {
				name: "showMissedCalls";
				signal: "show";
				source: "missedCalls";
				action: STATE_SET "active" 0.0;
				transition: LINEAR 0.5;
				target: "missedCalls";
			}
			program {
				name: "hideMissedCalls";
				signal: "hide";
				source: "missedCalls";
				action: STATE_SET "default" 0.0;
				transition: LINEAR 0.5;
				target: "missedCalls";
			}

//////////////////////////////// BOTTOM ////////////////////////////////////////
			part {
				name: "bottomContainer";
				type: GROUP;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1 { relative: 0.0 1.0; }
					rel2 { relative: 1.0 1.0; offset: 0 120; }
				}
				description {
					state: "hvga" 0.0;
					rel1 { relative: 0.0 1.0; }
					rel2 { relative: 1.0 1.0; offset: 0 90; }
				}
			}

			part {
				name: "bottom";
				type: IMAGE;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image { normal: "bottom.png"; }
					rel1 { relative: 0.0 1.0; offset: 0 -120; }
					rel2 { relative: 1.0 1.0; }
				}
				description {
					state: "hidden" 0.0;
					inherit: "default" 0.0;
					rel1 { to: "bottomContainer"; relative: 0.0 0.0; offset: 0 0; }
					rel2 { to: "bottomContainer"; relative: 1.0 1.0; offset: 0 0; }
				}
				description {
					state: "hvga" 0.0;
					image { normal: "bottom.png"; }
					rel1 { relative: 0.0 1.0; offset: 0 -90; }
					rel2 { relative: 1.0 1.0; }
				}
			}

			part {
				name: "slider-bg";
				type: RECT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: 255 255 255 0;
					rel1 { to: "bottom"; relative: 0.07 0.2; offset: 0 0; }
					rel2 { to: "bottom"; relative: 0.93 0.8; offset: 0 0; }
				}
			}

			part {
				name: "clipper";
				type: "RECT";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1.to: "slider-bg";
					rel2.to: "slider-bg";
					color: 255 255 255 255;
				}
			}

			part {
				name: "slider";
				type: RECT;
				mouse_events: 1;
				description {
					state: "default" 0.0;
					fixed: 1 1;
					min: 121 72;
					color: 0 0 0 0;
					rel1 { to: "slider-bg"; relative: 0.0 0.0; }
					rel2 { to: "slider-bg"; relative: 1.0 1.0; }
				}
				description {
					state: "hvga" 0.0;
					fixed: 1 1;
					min: 95 55;
					color: 0 0 0 0;
					rel1 { to: "slider-bg"; relative: 0.0 0.0; }
					rel2 { to: "slider-bg"; relative: 1.0 1.0; }
				}
				dragable {
					confine: "slider-bg";
					events: "slider";
					x: 1 7 100;
					y: 0 0 0;
				}
			}

			part {
				name: "sliderbackground-middle";
				type: "IMAGE";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image.normal: "sliderbackground_middle.png";
					rel1 { to: "slider-bg"; relative: 0.0 0.0; offset: 25 0; }
					rel2 { to: "slider-bg"; relative: 1.0 1.0; offset: -25 0; }
				}
			}

			part {
				name: "sliderbackground-left";
				type: "IMAGE";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image.normal: "sliderbackground_left.png";
					rel1.to: "slider-bg";
					rel2.to: "slider-bg";
					rel2.relative: 0.0 1.0;
					rel2.offset: 25 0;
				}
			}

			part {
				name: "sliderbackground-right";
				type: "IMAGE";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					image.normal: "sliderbackground_right.png";
					rel1.to: "slider-bg";
					rel1.relative: 1.0 0.0;
					rel1.offset: -25 0;
					rel2.to: "slider-bg";
				}
			}

			part {
				name: "arrow";
				type: "IMAGE";
				mouse_events: 0;
				clip_to: "clipper";
				description {
					state: "default" 0.0;
					image.normal: "slider.png";
					rel1.to: "slider";
					rel2.to: "slider";
				}
			}

			part {
				name: "overlay";
				type: "RECT";
				mouse_events: 1;
				repeat_events: 1;
				description {
					state: "default" 0.0;
					color: 0 0 0 0;
					rel1 { relative: 0.0 0.0; }
					rel2 { relative: 1.0 1.0; }
				}
			}

			}

		programs {
			program {
				name: "load";
				signal: "load";
				source: "*";
				script {
					clock_cb(-1);
					new fx, fy, fw, fh;
					get_geometry(PART:"slider", fx, fy, fw, fh);
					move_eye(fx+fw/2, fy+fh/2);
				}
			}
			program {
				name: "set_hvga";
				signal: "set";
				source: "hvga";
				action: STATE_SET "hvga" 0.0;
				target: "topbarContainer";
				target: "topbar";
				target: "gsmContainer";
				target: "batteryContainer";
				target: "clockContainer";
				target: "clock";
				target: "bottomContainer";
				target: "bottom";
				target: "slider";
			}
			program {
				name: "set_default";
				signal: "set";
				source: "default";
				action: STATE_SET "default" 0.0;
				target: "topbarContainer";
				target: "topbar";
				target: "gsmContainer";
				target: "batteryContainer";
				target: "clockContainer";
				target: "clock";
				target: "bottomContainer";
				target: "bottom";
				target: "slider";
			}

			program {
				name: "clock_init";
				signal: "clock_init";
				source: "";
				script { clock_cb(0); }
			}

			program {
				name: "unlock";
				signal: "preUnlockScreen";
				source: "slider";
				action: STATE_SET "hidden" 0.0;
				transition: ACCELERATE 0.25;
				target: "bottom";
				target: "topbar";
				target: "clock";
				after: "unlock2";
			}
			program {
				name: "eye-move";
				signal: "mouse,move";
				source: "overlay";
				script {
					new mx, my;
					get_mouse(mx, my);
					move_eye(mx, my);
				}
			}
			program {
				name: "unlock2";
				action: SIGNAL_EMIT "unlockScreen" "slider";
			}
			program {
				name: "drag_end";
				signal: "mouse,up,1";
				source: "slider";
				script {
					new Float:dx, Float:dy;
					get_drag(PART:"slider", dx, dy);
					if (dx >= 0.9) {
						set_drag(PART:"slider", 0.0, 0.0);
						emit("preUnlockScreen", "slider");
					}
					else {
						set_drag(PART:"slider", 0.0, 0.0);
					}
				}
			}
		}
	}
}
